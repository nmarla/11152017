/////////////////////////tracking controller/////////////////
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using UserIssues.ViewModels;
using UserIssues.Facade;
using UserIssues.Models;

namespace UserIssues.Controllers
{
    [Authorize]
    public class TrackingController : Controller
    {
        //
        // GET: /Tracking/
        #region "Unitofwork Reference"

        ITrackingBO _tackingBO = null;

        public TrackingController(ITrackingBO tackingBO)
        {
            this._tackingBO = tackingBO;
        }
        public TrackingController()
        {
            _tackingBO = new TrackingBO();
        }

        #endregion

        [HttpGet]
        public ActionResult TrackingInfo()
        {
            Session["ccnum"] = null;
            FillDropdowns();
            return View();
            //CorrCompInfo corrcominfo = new CorrCompInfo();
          //   int ccno = _tackingBO.getlastccnumber(corrcominfo);
         //   ccno = ccno + 1;
           // corrcominfo.cc_number = ccno;
          //  TrackingViewModel trackingVM = new TrackingViewModel();
           // trackingVM.SupplyType = _tackingBO.GetItemsfordropdownsfromctscodetable(100);
           // trackingVM.purposeofcontact = new SelectList(_tackingBO.GetMobileList(100), "table_code", "short_description"); 
          //  trackingVM.corrcmpInfo = corrcominfo;
        //    ViewData["ccnumber"] = ccno;  
        }
        [HttpPost]
        public ActionResult DisplayData(string searchterm = "")
        {
            List<CorrCompInfo> gridData = new List<CorrCompInfo>();
          //  gridData = _tackingBO.GetItemsfordropdownsfromctscodetable(100);
            gridData = _tackingBO.GetCorrcompIssues();
            return View(gridData);
        }
        public ActionResult DetailReport(int ccno)
        {
            TrackingViewModel trackingVM = new TrackingViewModel();
            FillDropdowns();
           // CorrCompInfo corrcominfo = new CorrCompInfo();
          //  corrcominfo = _tackingBO.GetCorrcompIssuesbyccno(ccno);
            trackingVM.corrcmpInfo = _tackingBO.GetCorrcompIssuesbyccno(ccno); ;
           // trackingVM.corrcmpInfo.cc_number = 100;
            
           // ViewData["PurposeOfContact"] = corrcominfo.purpose_of_contact;
            //ViewData["PurposeOfContact"] = new SelectList(_tackingBO.GetItemsfordropdownsfromctscodetable(100), "table_code", "short_description", "test3");
           // trackingVM.purposeofcontact = new SelectList(_tackingBO.GetItemsfordropdownsfromctscodetable(100), "table_code", "short_description", "test3");
            return View("TrackingInfo",trackingVM);
        }
        [HttpPost]
        public ActionResult TrackingInfo(TrackingViewModel tackingviewmodel)
        {
            TrackingViewModel trackingVM = new TrackingViewModel();
            FillDropdowns();
            if (Session["ccnum"] == null)
            {
                _tackingBO.InsertData(tackingviewmodel);
                CorrCompInfo corrcominfo = new CorrCompInfo();
                int ccno = _tackingBO.getlastccnumber(corrcominfo);
                trackingVM.corrcmpInfo = _tackingBO.GetCorrcompIssuesbyccno(ccno); ;
                TempData["ccnum"] = ccno;
                Session["ccnum"] = ccno;
                //_tackingBO.SaveComplainData(tackingviewmodel);
                return View("TrackingInfo", trackingVM);
            }
            else
            {
                int ccno = Convert.ToInt32(Session["ccnum"]);
                trackingVM.corrcmpInfo = _tackingBO.GetCorrcompIssuesbyccno(ccno); ;
                return View("TrackingInfo", trackingVM);

            }
        }

        public void FillDropdowns()
        {
            try
            {
                List<CTSCodeTable> items = new List<CTSCodeTable>();
                //Purpose of Contact dropdown
               // items = _tackingBO.GetItemsfordropdownsfromctscodetable(100);
                items = _tackingBO.GetItemsfordropdownsctscodetable();
              //  items = items.Where(s => s.table_no.Equals(100)).ToList(); 
                //ViewBag.dropitems = items;
                ViewData["PurposeOfContact"] = items.Where(s => s.table_no.Equals(100)).ToList(); ;
               // ViewData["PurposeOfContact"] = new SelectList(_tackingBO.GetItemsfordropdownsfromctscodetable(100), "table_code", "short_description");
                //Complaint/enquiry dropdown
                items = _tackingBO.GetItemsfordropdownsfromctscodetable(100);
                //ViewBag.dropitems = items;
                ViewData["ComplaintEnquiry"] = items;
                //Complaint Status dropdown
                items = _tackingBO.GetItemsfordropdownsfromctscodetable(100);
                //ViewBag.dropitems = items;
                ViewData["ComplaintStatus"] = items;
                //Contract with DFTA dropdown
                items = _tackingBO.GetItemsfordropdownsfromctscodetable(140);
                //ViewBag.dropitems = items;
                ViewData["ContractwithDFTA"] = items;
                //If yes, select program type dropdown will come different DB not known yet
                //If yes, select program ID dropdown will come different DB not known yet
                //Incident Location dropdown
                items = _tackingBO.GetItemsfordropdownsfromctscodetable(100);
                //ViewBag.dropitems = items;
                ViewData["IncidentLocation"] = items;
                //Referred to dropdown
                items = _tackingBO.GetItemsfordropdownsfromctscodetable(160);
                //ViewBag.dropitems = items;
                ViewData["ReferredTo"] = items;
                //Referred Status dropdown
                items = _tackingBO.GetItemsfordropdownsfromctscodetable(170);
                //ViewBag.dropitems = items;
                ViewData["ReferredStatus"] = items;
                //Resolution handled by dropdown
                items = _tackingBO.GetItemsfordropdownsfromctscodetable(180);
                //ViewBag.dropitems = items;
                ViewData["ResolutionHandledBy"] = items;
                //Resolution Status dropdown
                items = _tackingBO.GetItemsfordropdownsfromctscodetable(190);
                //ViewBag.dropitems = items;
                ViewData["ResolutionStatus"] = items;
                //Category dropdown
                items = _tackingBO.GetItemsfordropdownsfromctscodetable(200);
                //ViewBag.dropitems = items;
                ViewData["Category"] = items;
            }
            catch (Exception ex)
            {

            }
        }
        public ActionResult Rendercomplaint()
        {
            TrackingViewModel vm = new TrackingViewModel();
            return View("Enquiry", vm);
        }
        [HttpPost]
        public ActionResult savecomplaintinfo(TrackingViewModel trackcomplaint)
        {
           // TrackingViewModel trckingvm = new TrackingViewModel();
            int ccno = Convert.ToInt32(Session["ccnum"]);
            _tackingBO.InsertDatatocorrcompcontactinfo(trackcomplaint,ccno);
            FillDropdowns();
            return View("TrackingInfo", trackcomplaint);
        }
        [HttpPost]
        public ActionResult savedetailsinfo(TrackingViewModel trackcomplaint)
        {
            // TrackingViewModel trckingvm = new TrackingViewModel();
            int ccno = Convert.ToInt32(Session["ccnum"]);
            _tackingBO.InsertUpdateIncLocationInfo(trackcomplaint, ccno);
            FillDropdowns();
            return View("TrackingInfo", trackcomplaint);
        }
    }
}
/////////////////////////tracking controller/////////////////////////////////////
/////////////////////////////////tracking bo layer///////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UserIssues.DataLayer;
using UserIssues.Models;
using UserIssues.ViewModels;

namespace UserIssues.Facade
{
    public class TrackingBO : ITrackingBO
    {
        #region "Unitofwork Reference"
        IUnitOfWork _unitOfWork = null;

        public TrackingBO(IUnitOfWork _unitOfWork)
        {
            this._unitOfWork = _unitOfWork;
        }
        public TrackingBO()
        {
            _unitOfWork = new UnitOfWork();
        }

        #endregion

        public int InsertData(TrackingViewModel trackingviewmodel)
        {
            try
            {
                CorrCompInfo corrcompinfo = new CorrCompInfo();
               // corrcompinfo.cc_number = trackingviewmodel.corrcmpInfo.cc_number;
                corrcompinfo.purpose_of_contact = trackingviewmodel.corrcmpInfo.purpose_of_contact;
                corrcompinfo.cc_recdin = trackingviewmodel.corrcmpInfo.cc_recdin;
                corrcompinfo.date_entered = trackingviewmodel.corrcmpInfo.date_entered.Date;
                corrcompinfo.date_recd = trackingviewmodel.corrcmpInfo.date_recd.Date;
                corrcompinfo.cc_date = DateTime.Now;
                corrcompinfo.recd_by = 1; // trackingviewmodel.corrcmpInfo.cc_recdby
                corrcompinfo.poc_other = trackingviewmodel.corrcmpInfo.poc_other;
                corrcompinfo.cc_status = trackingviewmodel.corrcmpInfo.cc_status;
                corrcompinfo.serv_req_number = trackingviewmodel.corrcmpInfo.serv_req_number;
                var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedure("SP_UpdateCorp @cc_number,@purpose_of_contact,@poc_other,@cc_recdin,@date_recd,@recd_by,@date_entered,@cc_date,@cc_status,@serv_req_number",
              //  var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedure("SP_Insertcorrcompinfo",
                             new SqlParameter("@cc_number", SqlDbType.Int) { Value = corrcompinfo.cc_number },
                            new SqlParameter("@purpose_of_contact", SqlDbType.VarChar) { Value = corrcompinfo.purpose_of_contact },
                            new SqlParameter("@poc_other", SqlDbType.VarChar) { Value = corrcompinfo.poc_other },
                            new SqlParameter("@cc_recdin", SqlDbType.VarChar) { Value = corrcompinfo.cc_recdin },
                            new SqlParameter("@date_recd", SqlDbType.Date) { Value =corrcompinfo.date_recd },
                            new SqlParameter("@recd_by", SqlDbType.Int) { Value = corrcompinfo.recd_by },
                            new SqlParameter("@date_entered", SqlDbType.Date) { Value = corrcompinfo.date_entered},
                            new SqlParameter("@cc_date", SqlDbType.Date) { Value = corrcompinfo.cc_date },
                            new SqlParameter("@cc_status", SqlDbType.VarChar) { Value = corrcompinfo.cc_status },
                            new SqlParameter("@serv_req_number", SqlDbType.VarChar) { Value = corrcompinfo.serv_req_number });
                //_unitOfWork.Repository<CorrCompInfo>().Insert(corrcompinfo);
                return result;
            }
            catch (Exception ex)
            {
                return 1;
            }
        }

        public int SaveComplainData(TrackingViewModel saveTrackingVM)
        {
            try
            {
                //CorrCompInfo table
                CorrCompInfo corrcompinfo = new CorrCompInfo();
                corrcompinfo.cc_number = saveTrackingVM.corrcmpInfo.cc_number;
                corrcompinfo.purpose_of_contact = "Test";// trackingviewmodel.corrcmpInfo.purpose_of_contact;
                corrcompinfo.cc_recdin = "Test2"; // trackingviewmodel.corrcmpInfo.cc_recdin;
                corrcompinfo.date_entered = DateTime.Now;
                corrcompinfo.date_recd = DateTime.Now;
                corrcompinfo.cc_date = DateTime.Now;
                corrcompinfo.recd_by = 1; // trackingviewmodel.corrcmpInfo.cc_recdby
                corrcompinfo.poc_other = saveTrackingVM.corrcmpInfo.serv_req_number;
                //CorrCompContactInfo table
                CorrCompContactInfo corrcompCntInfo = new CorrCompContactInfo();
                corrcompCntInfo.fname = saveTrackingVM.corrcmpcontactInfo.fname;
                corrcompCntInfo.lname = saveTrackingVM.corrcmpcontactInfo.lname;
                corrcompCntInfo.tel_number = saveTrackingVM.corrcmpcontactInfo.tel_number;
                corrcompCntInfo.email_add = saveTrackingVM.corrcmpcontactInfo.email_add;
                corrcompCntInfo.street_add = saveTrackingVM.corrcmpcontactInfo.street_add;
                corrcompCntInfo.city = saveTrackingVM.corrcmpcontactInfo.city;
                corrcompCntInfo.state = saveTrackingVM.corrcmpcontactInfo.state;
                corrcompCntInfo.zipcode = saveTrackingVM.corrcmpcontactInfo.zipcode;
                //IncLocationInfo table
                IncLocationInfo incLocationInfo = new IncLocationInfo();
                incLocationInfo.inc_loc_type = saveTrackingVM.inclocationinfo.inc_loc_type;
                incLocationInfo.street_add = saveTrackingVM.inclocationinfo.street_add;
                incLocationInfo.city = saveTrackingVM.inclocationinfo.city;
                incLocationInfo.state = saveTrackingVM.inclocationinfo.state;
                incLocationInfo.zipcode = saveTrackingVM.inclocationinfo.zipcode;
                incLocationInfo.inc_loc_type = saveTrackingVM.inclocationinfo.inc_loc_type;


                var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedure("SP_InsertMain @cc_number,@purpose_of_contact,@poc_other,@cc_recdin,@date_entered,@date_recd,@recd_by,@cc_date", "@UD_CC_NUMBER", "@fname", "@lname", "@tel_number", "@email_add", "@street_add", "@city", "@state", "@zipcode", "@zipcode2", "@dfta_id", "@site_name", "@last_updated_by", "@UD_CC_NUMBER", "@inc_loc_type", "@street_add_Inc", "@city_Inc", "@state_Inc", "@zipcode_Inc", "@zipcode2_Inc", "@last_update_by_Inc",
                               new SqlParameter("@cc_number", SqlDbType.Int) { Value = corrcompinfo.cc_number },
                              new SqlParameter("@purpose_of_contact", SqlDbType.VarChar) { Value = corrcompinfo.purpose_of_contact },
                              new SqlParameter("@poc_other", SqlDbType.VarChar) { Value = corrcompinfo.poc_other },
                              new SqlParameter("@cc_recdin", SqlDbType.VarChar) { Value = corrcompinfo.cc_recdin },
                              new SqlParameter("@date_entered", SqlDbType.Date) { Value = corrcompinfo.date_entered },
                              new SqlParameter("@date_recd", SqlDbType.Date) { Value = corrcompinfo.date_recd },
                              new SqlParameter("@recd_by", SqlDbType.Int) { Value = corrcompinfo.recd_by },
                              new SqlParameter("@cc_date", SqlDbType.Date) { Value = corrcompinfo.cc_date },
                              new SqlParameter("@fname", SqlDbType.VarChar) { Value = corrcompCntInfo.fname },
                              new SqlParameter("@lname", SqlDbType.VarChar) { Value = corrcompCntInfo.lname },
                              new SqlParameter("@tel_number", SqlDbType.VarChar) { Value = corrcompCntInfo.tel_number },
                              new SqlParameter("@email_add", SqlDbType.VarChar) { Value = corrcompCntInfo.email_add },
                              new SqlParameter("@street_add", SqlDbType.VarChar) { Value = corrcompCntInfo.street_add },
                              new SqlParameter("@city", SqlDbType.VarChar) { Value = corrcompCntInfo.city },
                              new SqlParameter("@state", SqlDbType.Char) { Value = corrcompCntInfo.state },
                              new SqlParameter("@zipcode", SqlDbType.Char) { Value = corrcompCntInfo.zipcode },
                              new SqlParameter("@zipcode2", SqlDbType.Char) { Value = corrcompCntInfo.zipcode },
                              new SqlParameter("@dfta_id", SqlDbType.Char) { Value = "test1" },
                              new SqlParameter("@site_name", SqlDbType.VarChar) { Value = "TestSiteName" },
                              new SqlParameter("@last_updated_by", SqlDbType.Int) { Value = 1 },
                              new SqlParameter("@inc_loc_type", SqlDbType.VarChar) { Value = incLocationInfo.inc_loc_type },
                              new SqlParameter("@street_add_Inc", SqlDbType.VarChar) { Value = incLocationInfo.street_add },
                              new SqlParameter("@city_Inc", SqlDbType.VarChar) { Value = incLocationInfo.city },
                              new SqlParameter("@state_Inc", SqlDbType.Char) { Value = incLocationInfo.state },
                              new SqlParameter("@zipcode_Inc", SqlDbType.Date) { Value = incLocationInfo.zipcode },
                              new SqlParameter("@zipcode2_Inc", SqlDbType.Date) { Value = incLocationInfo.zipcode },
                              new SqlParameter("@last_update_by_Inc", SqlDbType.Int) { Value = 1 });
                return result;
            }
            catch (Exception ex)
            {
                return 1;
            }
        }
        public List<CorrCompInfo> GetItemsfordropdowns()
        {
            try
            {
                string text = "kokl";
                //  var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_Test").ToList();
                var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_Test @poc",
                           new SqlParameter("@poc", SqlDbType.NVarChar) { Value = text }).ToList();
                return result;
            }
            catch (Exception ex)
            {
                //  log.Info("Error in Getting  details Of All Colleges" + ex);
                throw ex;
            }
        }
        public List<CTSCodeTable> GetItemsfordropdownsfromctscodetable(int x)
        {
            try
            {
                //  var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_Test").ToList();
                var result = _unitOfWork.Repository<CTSCodeTable>().ExecuteProcedureForList("SP_CorrespondenceType @CorrType ",
                           new SqlParameter("@CorrType ", SqlDbType.VarChar) { Value = x }).ToList();
                return result;
            }
            catch (Exception ex)
            {
                //  log.Info("Error in Getting  details Of All Colleges" + ex);
                throw ex;
            }
        }
        public int getlastccnumber(CorrCompInfo corrcominfo)
        {
            try
            {
                var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_GetLastCCNumber").ToList();
                int lastccno = Convert.ToInt32(result[0].cc_number);
                return lastccno;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public List<CorrCompInfo> GetCorrcompIssues()
        {
            try
            {
                string text = "kokl";
                //  var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_Test").ToList();
                var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_GetIssues").ToList();
                result = result.Where(s => s.serv_req_number.Equals("doitt1")).ToList(); 
                return result;
            }
            catch (Exception ex)
            {
                //  log.Info("Error in Getting  details Of All Colleges" + ex);
                throw ex;
            }
        }
        public CorrCompInfo GetCorrcompIssuesbyccno(int ccno)
        {
            try
            {
                CorrCompInfo corrcompinfo = new CorrCompInfo();
                //  var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_Test").ToList();
                var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_GetIssuesbyCCno @CCno ",
                           new SqlParameter("@CCno ", SqlDbType.VarChar) { Value = ccno }).ToList();
                corrcompinfo = result[0];
                //corrcompinfo.cc_number = Convert.ToInt32(result[0].cc_number);
                //corrcompinfo.cc_date = Convert.ToDateTime(result[0].cc_date);
                //corrcompinfo.cc_recdin = Convert.ToString(result[0].cc_recdin);
                //corrcompinfo.purpose_of_contact = Convert.ToString(result[0].purpose_of_contact);
               
                

                return corrcompinfo;
            }
            catch (Exception ex)
            {
                //  log.Info("Error in Getting  details Of All Colleges" + ex);
                throw ex;
            }
        }
    
        //public int InsertData(TrackingViewModel trackingviewmodel)
        //{
        //    try
        //    {
        //        CorrCompInfo corrcompinfo = new CorrCompInfo();
        //        corrcompinfo.cc_number = trackingviewmodel.corrcmpInfo.cc_number;
        //        corrcompinfo.purpose_of_contact = trackingviewmodel.corrcmpInfo.purpose_of_contact;
        //        corrcompinfo.cc_recdin = trackingviewmodel.corrcmpInfo.cc_recdin;
        //        corrcompinfo.date_entered = trackingviewmodel.corrcmpInfo.date_entered.Date;
        //        corrcompinfo.date_recd = trackingviewmodel.corrcmpInfo.date_recd.Date;
        //        corrcompinfo.cc_date = trackingviewmodel.corrcmpInfo.cc_date.Date;
        //        corrcompinfo.recd_by = 1; // trackingviewmodel.corrcmpInfo.cc_recdby
        //        corrcompinfo.poc_other = trackingviewmodel.corrcmpInfo.serv_req_number;
        //        corrcompinfo.cc_status = trackingviewmodel.corrcmpInfo.cc_status;
        //        corrcompinfo.serv_req_number = trackingviewmodel.corrcmpInfo.serv_req_number;
        //        var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedure("SP_UpdateCorp @cc_number,@purpose_of_contact,@poc_other,@cc_recdin,@date_entered,@date_recd,@recd_by,@cc_date,@cc_status,@serv_req_number",
        //                       new SqlParameter("@cc_number", SqlDbType.Int) { Value = corrcompinfo.cc_number },
        //                      new SqlParameter("@purpose_of_contact", SqlDbType.VarChar) { Value = corrcompinfo.purpose_of_contact },
        //                      new SqlParameter("@poc_other", SqlDbType.VarChar) { Value = corrcompinfo.poc_other },
        //                      new SqlParameter("@cc_recdin", SqlDbType.VarChar) { Value = corrcompinfo.cc_recdin },
        //                      new SqlParameter("@date_entered", SqlDbType.Date) { Value = corrcompinfo.date_entered.ToShortDateString() },
        //                      new SqlParameter("@date_recd", SqlDbType.Date) { Value = corrcompinfo.date_recd.ToShortDateString() },
        //                      new SqlParameter("@recd_by", SqlDbType.Int) { Value = corrcompinfo.recd_by },
        //                      new SqlParameter("@cc_date", SqlDbType.Date) { Value = corrcompinfo.cc_date.ToShortDateString() },
        //                      new SqlParameter("@cc_status", SqlDbType.VarChar) { Value = corrcompinfo.cc_status },
        //                      new SqlParameter("@serv_req_number", SqlDbType.VarChar) { Value = corrcompinfo.serv_req_number });
        //        _unitOfWork.Repository<CorrCompInfo>().Insert(corrcompinfo);

        //        //CorrCompContactInfo table
        //        //CorrCompContactInfo corrcompCntInfo = new CorrCompContactInfo();
        //        //corrcompCntInfo.fname = trackingviewmodel.corrcmpcontactInfo.fname;
        //        //corrcompCntInfo.lname = trackingviewmodel.corrcmpcontactInfo.lname;
        //        //corrcompCntInfo.tel_number = trackingviewmodel.corrcmpcontactInfo.tel_number;
        //        //corrcompCntInfo.email_add = trackingviewmodel.corrcmpcontactInfo.email_add;
        //        //corrcompCntInfo.street_add = trackingviewmodel.corrcmpcontactInfo.street_add;
        //        //corrcompCntInfo.city = trackingviewmodel.corrcmpcontactInfo.city;
        //        //corrcompCntInfo.state = trackingviewmodel.corrcmpcontactInfo.state;
        //        //corrcompCntInfo.zipcode = trackingviewmodel.corrcmpcontactInfo.zipcode;

        //        //var result1 = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedure("SP_InsertOnlyCorpcntInfo1 @cc_number,@fname,@lname,@tel_number,@email_add,@street_add,@city,@state,@zipcode,@zipcode2,@dfta_id,@site_name,@last_updated_by",
        //        //    new SqlParameter("@cc_number", SqlDbType.Int) { Value = 555 },
        //        //    new SqlParameter("@fname", SqlDbType.VarChar) { Value = corrcompCntInfo.fname },
        //        //              new SqlParameter("@lname", SqlDbType.VarChar) { Value = corrcompCntInfo.lname },
        //        //              new SqlParameter("@tel_number", SqlDbType.VarChar) { Value = corrcompCntInfo.tel_number },
        //        //              new SqlParameter("@email_add", SqlDbType.VarChar) { Value = corrcompCntInfo.email_add },
        //        //              new SqlParameter("@street_add", SqlDbType.VarChar) { Value = corrcompCntInfo.street_add },
        //        //              new SqlParameter("@city", SqlDbType.VarChar) { Value = corrcompCntInfo.city },
        //        //              new SqlParameter("@state", SqlDbType.Char) { Value = corrcompCntInfo.state },
        //        //              new SqlParameter("@zipcode", SqlDbType.Char) { Value = corrcompCntInfo.zipcode },
        //        //              new SqlParameter("@zipcode2", SqlDbType.Char) { Value = corrcompCntInfo.zipcode },
        //        //              new SqlParameter("@dfta_id", SqlDbType.Char) { Value = "test" },
        //        //              new SqlParameter("@site_name", SqlDbType.VarChar) { Value = "TestSiteName" },
        //        //              new SqlParameter("@last_updated_by", SqlDbType.Int) { Value = corrcompinfo.recd_by });

        //        ////IncLocationInfo table
        //        //IncLocationInfo incLocationInfo = new IncLocationInfo();
        //        //incLocationInfo.inc_loc_type = trackingviewmodel.inclocationinfo.inc_loc_type;
        //        //incLocationInfo.incstreet_add = trackingviewmodel.inclocationinfo.incstreet_add;
        //        //incLocationInfo.inccity = trackingviewmodel.inclocationinfo.inccity;
        //        //incLocationInfo.incstate = trackingviewmodel.inclocationinfo.incstate;
        //        //incLocationInfo.inczipcode = trackingviewmodel.inclocationinfo.inczipcode;
        //        //incLocationInfo.inc_loc_type = trackingviewmodel.inclocationinfo.inc_loc_type;
        //        //var result2 = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedure("SP_InsertOnlyInclocinfo @cc_number,@inc_loc_type,@street_add_Inc,@city_Inc,@state_Inc,@zipcode_Inc,@zipcode2_Inc,@last_update_by_Inc",
        //        //              new SqlParameter("@cc_number", SqlDbType.Int) { Value = 555 },
        //        //            new SqlParameter("@inc_loc_type", SqlDbType.VarChar) { Value = incLocationInfo.inc_loc_type },
        //        //              new SqlParameter("@street_add_Inc", SqlDbType.VarChar) { Value = incLocationInfo.incstreet_add },
        //        //              new SqlParameter("@city_Inc", SqlDbType.VarChar) { Value = incLocationInfo.inccity },
        //        //              new SqlParameter("@state_Inc", SqlDbType.Char) { Value = incLocationInfo.incstate },
        //        //              new SqlParameter("@zipcode_Inc", SqlDbType.Char) { Value = incLocationInfo.inczipcode },
        //        //              new SqlParameter("@zipcode2_Inc", SqlDbType.Char) { Value = incLocationInfo.inczipcode },
        //        //              new SqlParameter("@last_update_by_Inc", SqlDbType.Int) { Value = corrcompinfo.recd_by });
        //        return result;


        //    }
        //    catch (Exception ex)
        //    {
        //        return 1;
        //    }
        //}
        //public int InsertData(TrackingViewModel trackingviewmodel)
        //{
        //    try
        //    {
        //        CorrCompInfo corrcompinfo = new CorrCompInfo();
        //        corrcompinfo.cc_number = trackingviewmodel.corrcmpInfo.cc_number;
        //        corrcompinfo.purpose_of_contact = trackingviewmodel.corrcmpInfo.purpose_of_contact;
        //        corrcompinfo.cc_recdin = trackingviewmodel.corrcmpInfo.cc_recdin;
        //        corrcompinfo.date_entered = trackingviewmodel.corrcmpInfo.date_entered.Date;
        //        corrcompinfo.date_recd = trackingviewmodel.corrcmpInfo.date_recd.Date;
        //        corrcompinfo.cc_date = DateTime.Now;
        //        corrcompinfo.recd_by = 1; // trackingviewmodel.corrcmpInfo.cc_recdby
        //        corrcompinfo.poc_other = trackingviewmodel.corrcmpInfo.poc_other;
        //        corrcompinfo.cc_status = trackingviewmodel.corrcmpInfo.cc_status;
        //        corrcompinfo.serv_req_number = trackingviewmodel.corrcmpInfo.serv_req_number;
        //        // var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedure("SP_Insertcorrcompinfo @cc_number,@purpose_of_contact,@poc_other,@cc_recdin,@date_recd,@recd_by,@date_entered,@cc_date,@cc_status,@serv_req_number")
        //        var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedure("Testprocc @cc_number,@purpose_of_contact,@poc_other,@date_entered",
        //                     new SqlParameter("@cc_number", SqlDbType.Int) { Value = corrcompinfo.cc_number },
        //                    new SqlParameter("@purpose_of_contact", SqlDbType.VarChar) { Value = corrcompinfo.purpose_of_contact },
        //                    new SqlParameter("@poc_other", SqlDbType.VarChar) { Value = corrcompinfo.poc_other },
        //                    new SqlParameter("@date_entered", SqlDbType.Date) { Value = corrcompinfo.date_entered}
        //                  );
        //        //_unitOfWork.Repository<CorrCompInfo>().Insert(corrcompinfo);
        //        return result;
        //    }
        //    catch (Exception ex)
        //    {
        //        return 1;
        //    }
        //}
        public IEnumerable<CTSCodeTable> GetMobileList(int x)
        {
            try
            {
                //  var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_Test").ToList();
                var result = _unitOfWork.Repository<CTSCodeTable>().ExecuteProcedureForList("SP_CorrespondenceType @CorrType ",
                           new SqlParameter("@CorrType ", SqlDbType.VarChar) { Value = x }).ToList();
                return result;
            }
            catch (Exception ex)
            {
                //  log.Info("Error in Getting  details Of All Colleges" + ex);
                throw ex;
            }
        }
        public List<CTSCodeTable> GetItemsfordropdownsctscodetable()
        {
            try
            {
                //  var result = _unitOfWork.Repository<CorrCompInfo>().ExecuteProcedureForList("SP_Test").ToList();
                var result = _unitOfWork.Repository<CTSCodeTable>().ExecuteProcedureForList("SP_Dropdownitems").ToList();
               // result = result.Where(s => s.serv_req_number.Equals("doitt1")).ToList(); 
                //var result = _unitOfWork.Repository<CTSCodeTable>().ExecuteProcedureForList("SP_CorrespondenceType @CorrType ",
                //           new SqlParameter("@CorrType ", SqlDbType.VarChar) { Value = x }).ToList();
                return result;
            }
            catch (Exception ex)
            {
                //  log.Info("Error in Getting  details Of All Colleges" + ex);
                throw ex;
            }
        }
        public int InsertDatatocorrcompcontactinfo(TrackingViewModel corrcntInfoVM,int ccno)
        {
            try
            {
                //CorrCompContactInfo table
                CorrCompContactInfo corrcompCntInfo = new CorrCompContactInfo();
                corrcompCntInfo.fname = corrcntInfoVM.corrcmpcontactInfo.fname;
                corrcompCntInfo.lname = corrcntInfoVM.corrcmpcontactInfo.lname;
                corrcompCntInfo.tel_number = corrcntInfoVM.corrcmpcontactInfo.tel_number;
                corrcompCntInfo.email_add = corrcntInfoVM.corrcmpcontactInfo.email_add;
                corrcompCntInfo.street_add = corrcntInfoVM.corrcmpcontactInfo.street_add;
                corrcompCntInfo.city = corrcntInfoVM.corrcmpcontactInfo.city;
                corrcompCntInfo.state = corrcntInfoVM.corrcmpcontactInfo.state;
                corrcompCntInfo.zipcode = corrcntInfoVM.corrcmpcontactInfo.zipcode;
                int userID = 1;
                var result1 = _unitOfWork.Repository<CorrCompContactInfo>().ExecuteProcedure("SP_InsertUpdateCorrCompContactInfo @cc_number,@fname,@lname,@tel_number,@email_add,@street_add,@city,@state,@zipcode,@zipcode2,@dfta_id,@site_name,@last_updated_by",
                    new SqlParameter("@cc_number", SqlDbType.Int) { Value = ccno },
                    new SqlParameter("@fname", SqlDbType.VarChar) { Value = corrcompCntInfo.fname },
                              new SqlParameter("@lname", SqlDbType.VarChar) { Value = corrcompCntInfo.lname },
                              new SqlParameter("@tel_number", SqlDbType.VarChar) { Value = corrcompCntInfo.tel_number },
                              new SqlParameter("@email_add", SqlDbType.VarChar) { Value = corrcompCntInfo.email_add },
                              new SqlParameter("@street_add", SqlDbType.VarChar) { Value = corrcompCntInfo.street_add },
                              new SqlParameter("@city", SqlDbType.VarChar) { Value = corrcompCntInfo.city },
                              new SqlParameter("@state", SqlDbType.Char) { Value = corrcompCntInfo.state },
                              new SqlParameter("@zipcode", SqlDbType.Char) { Value = corrcompCntInfo.zipcode },
                              new SqlParameter("@zipcode2", SqlDbType.Char) { Value = corrcompCntInfo.zipcode },
                              new SqlParameter("@dfta_id", SqlDbType.Char) { Value = "test" },
                              new SqlParameter("@site_name", SqlDbType.VarChar) { Value = "TestSiteName" },
                              new SqlParameter("@last_updated_by", SqlDbType.Int) { Value = userID });
                return result1;

            }
            catch (Exception ex)
            {
                return 1;
            }
        }
        public void InsertUpdateIncLocationInfo(TrackingViewModel inclocatonInfoVM, int ccno)
        {
            try
            {
                int userID = 1;
                ////IncLocationInfo table
                IncLocationInfo incLocationInfo = new IncLocationInfo();
                incLocationInfo.inc_loc_type = inclocatonInfoVM.inclocationinfo.inc_loc_type;
                incLocationInfo.street_add = inclocatonInfoVM.inclocationinfo.street_add;
                incLocationInfo.city = inclocatonInfoVM.inclocationinfo.city;
                incLocationInfo.state = inclocatonInfoVM.inclocationinfo.state;
                incLocationInfo.zipcode = inclocatonInfoVM.inclocationinfo.zipcode;
                incLocationInfo.inc_loc_type = inclocatonInfoVM.inclocationinfo.inc_loc_type;
                var result2 = _unitOfWork.Repository<IncLocationInfo>().ExecuteProcedure("SP_InsertUpdateIncLocationInfo @cc_number,@inc_loc_type,@street_add_Inc,@city_Inc,@state_Inc,@zipcode_Inc,@zipcode2_Inc,@last_update_by_Inc",
                              new SqlParameter("@cc_number", SqlDbType.Int) { Value = ccno },
                            new SqlParameter("@inc_loc_type", SqlDbType.VarChar) { Value = incLocationInfo.inc_loc_type },
                              new SqlParameter("@street_add_Inc", SqlDbType.VarChar) { Value = incLocationInfo.street_add },
                              new SqlParameter("@city_Inc", SqlDbType.VarChar) { Value = incLocationInfo.city },
                              new SqlParameter("@state_Inc", SqlDbType.Char) { Value = incLocationInfo.state },
                              new SqlParameter("@zipcode_Inc", SqlDbType.Char) { Value = incLocationInfo.zipcode },
                              new SqlParameter("@zipcode2_Inc", SqlDbType.Char) { Value = incLocationInfo.zipcode },
                              new SqlParameter("@last_update_by_Inc", SqlDbType.Int) { Value = userID });
            }
            catch (Exception ex)
            {

            }
        }
    }
}
//////////////////////////////////tracking bo layer////////////////////////////////////
///////////////////////////////////// submit button in parial viws///////////////////////////
<input type="submit" class="btn btn-primary btn-sm" formaction="savecomplaintinfo" value="Save Complaint">
<input type="submit" class="btn btn-primary btn-sm" formaction="savedetailsinfo" value="Save Details">
<input type="submit" class="btn btn-primary btn-sm" value="Save" formaction="TrackingInfo">
///////////////////////////////////// submit button in parial viws///////////////////////////