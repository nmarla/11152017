using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CTSImp1.Facade;
using CTSImp1.Models;
using CTSImp1.ViewModels;
using System.IO;
using CTSImp1.Security;


namespace CTSImp1.Controllers
{
    public class TrackingController : BaseController
    {

        //
        // GET: /Tracking/
        #region "Unitofwork Reference"

        ITrackingBO _tackingBO = null;

        public TrackingController(ITrackingBO tackingBO)
        {
            this._tackingBO = tackingBO;
        }
        public TrackingController()
        {
            _tackingBO = new TrackingBO();
        }
        #endregion
        /// <summary>
        /// Tracking view display
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Authorize]
        [RequireAuthentication]
        public ActionResult TrackingInfo()
        {            
            Session["ccnum"] = null;
            FillDropdowndata();           
            TrackingViewModel trackingVM = new TrackingViewModel();
            var profileData = this.Session["UserProfile"] as UserInfo;
            trackingVM.userInfom = profileData;
            return View("Tracking", trackingVM);
        }
        /// <summary>
        /// Tracking view submit
        /// </summary>
        /// <param name="tackingviewmodel"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        [HttpPost]
        [Authorize]
        [RequireAuthentication]
        public ActionResult TrackingInfo(TrackingViewModel tackingviewmodel)
        {
            TrackingViewModel trackingVM = new TrackingViewModel();
            FillDropdowndata();
            if (Session["ccnum"] == null)
            {
                _tackingBO.InsertData(tackingviewmodel);
                ModelState.Clear();
                var profileData = this.Session["UserProfile"] as UserInfo;
                trackingVM.userInfom = profileData;
                CorrCompInfo corrcominfo = new CorrCompInfo();
                int ccno = _tackingBO.GetLastccnumber(corrcominfo);
                trackingVM.corrcmpInfo = _tackingBO.GetCCTKTByccno(ccno);
               // trackingVM.userInfom = _tackingBO.GetUserDetailsForID(trackingVM.corrcmpInfo.recd_by);
                Session["ccnum"] = ccno;
                return View("Tracking", trackingVM);
            }
            else
            {
                int ccno = Convert.ToInt32(Session["ccnum"]);
                trackingVM.corrcmpInfo = _tackingBO.GetCCTKTByccno(ccno); ;
                return View("Tracking", trackingVM);
            }
        }


        /// <summary>
        /// Get tracking view for existing record
        /// </summary>
        /// <param name="ccno"></param>
        /// <returns></returns>
        [Authorize]
        [RequireAuthentication]
        public ActionResult DetailReport(int ccno)
        {
            TrackingViewModel trackingVM = new TrackingViewModel();
            Session["ccnum"] = ccno;
            FillDropdowndata();
            var profileData = this.Session["UserProfile"] as UserInfo;
            trackingVM.userInfom = profileData;
            trackingVM.corrcmpInfo = _tackingBO.GetCCTKTByccno(ccno);
            trackingVM.corrcmpcontactInfo = _tackingBO.GetCCCNTInfo(ccno);
            // trackingVM.budgetccInfo = _tackingBO.GetProgramNameFromDFTAID(trackingVM.corrcmpcontactInfo.dfta_id); ;
            trackingVM.inclocationinfo = _tackingBO.GetCCDetailsInfo(ccno);
            trackingVM.ccDescInfo = _tackingBO.GetCCCommentsInfo(ccno);
            trackingVM.referralInfom = _tackingBO.GetCCReferralInfo(ccno);
            trackingVM.resolutionInfom = _tackingBO.GetCCResolutionInfo(ccno);
            trackingVM.documentshistroy = _tackingBO.GetdocumentsHistroy(ccno);
            return View("Tracking", trackingVM);
        }

        /// <summary>
        /// Save complaint/inquiry tab information to DB
        /// </summary>
        /// <param name="trackcomplaint"></param>
        /// <returns></returns>
        [HttpPost]
        [RequireAuthentication]
        public ActionResult SaveComplaintInfo(TrackingViewModel trackcomplaint)
        {
            // TrackingViewModel trckingvm = new TrackingViewModel();
            // int ccno = Convert.ToInt32(Session["ccnum"]);
            if (!string.IsNullOrEmpty(trackcomplaint.corrcmpInfo.cc_number.ToString()))
            {
                var profileData = this.Session["UserProfile"] as UserInfo;
                trackcomplaint.userInfom = profileData;
                int UserId = trackcomplaint.userInfom.usersinfo_id;
                _tackingBO.InsertUpdateCCCNTInfo(trackcomplaint, trackcomplaint.corrcmpInfo.cc_number, UserId);
                trackcomplaint.corrcmpInfo = _tackingBO.GetCCTKTByccno(trackcomplaint.corrcmpInfo.cc_number);
                BudgetCodeModel budgetinfo = new BudgetCodeModel();
                budgetinfo = _tackingBO.GetProgramNameFromDFTAID(trackcomplaint.corrcmpcontactInfo.dfta_id);
                FillDropdowndata();
                trackcomplaint.corrcmpcontactInfo = _tackingBO.GetCCCNTInfo(trackcomplaint.corrcmpInfo.cc_number);                
                 trackcomplaint.budgetccInfo = budgetinfo;
                return View("Tracking", trackcomplaint);
            }
            else
            {
                return View("Tracking");
            }
        }
        /// <summary>
        /// Save Details tab information to DB
        /// </summary>
        /// <param name="trackdetails"></param>
        /// <returns></returns>
        [HttpPost]
        [RequireAuthentication]
        public ActionResult SaveDetailsInfo(TrackingViewModel trackdetails)
        {
            // TrackingViewModel trckingvm = new TrackingViewModel();
            // int ccno = Convert.ToInt32(Session["ccnum"]);
            if (!string.IsNullOrEmpty(trackdetails.corrcmpInfo.cc_number.ToString()))
            {
                // int UserId = _tackingBO.GetUserIDFromUserInfo(trackdetails);
                var profileData = this.Session["UserProfile"] as UserInfo;
                trackdetails.userInfom = profileData;
                int UserId = trackdetails.userInfom.usersinfo_id;
                _tackingBO.InsertUpdateCCDetailsInfo(trackdetails, trackdetails.corrcmpInfo.cc_number, UserId);
                _tackingBO.InsertUpdateCorrCompDescResolution(trackdetails, trackdetails.corrcmpInfo.cc_number, UserId);
                trackdetails.corrcmpInfo = _tackingBO.GetCCTKTByccno(trackdetails.corrcmpInfo.cc_number);
                trackdetails.corrcmpcontactInfo = _tackingBO.GetCCCNTInfo(trackdetails.corrcmpInfo.cc_number);
                trackdetails.inclocationinfo = _tackingBO.GetCCDetailsInfo(trackdetails.corrcmpInfo.cc_number);
                trackdetails.ccDescInfo = _tackingBO.GetCCCommentsInfo(trackdetails.corrcmpInfo.cc_number);
                FillDropdowndata();
                // trackdetails.documentsInfom.hiddenvalue = "ComplaintIncident";
                return View("Tracking", trackdetails);
            }
            else
            {
                return View("Tracking");
            }
        }
        /// <summary>
        /// Save Referral tab information to DB
        /// </summary>
        /// <param name="trackreferral"></param>
        /// <returns></returns>
        [HttpPost]
        [RequireAuthentication]
        public ActionResult SaveReferralInfo(TrackingViewModel trackreferral)
        {
            if (!string.IsNullOrEmpty(trackreferral.corrcmpInfo.cc_number.ToString()))
            {
                var profileData = this.Session["UserProfile"] as UserInfo;
                trackreferral.userInfom = profileData;
                int UserId = trackreferral.userInfom.usersinfo_id;
                _tackingBO.InsertUpdateCCReferralInfo(trackreferral, trackreferral.corrcmpInfo.cc_number, UserId);
                _tackingBO.InsertUpdateCCReferralText(trackreferral, trackreferral.corrcmpInfo.cc_number, UserId, 1);
                string supervisorEmail = GetUnitSupervisorDetails(trackreferral.referralInfom.referred_to_unit, "Unit Supervisor");
                MailHelper mailHelper = new MailHelper();
                mailHelper.SendEmailNotification(supervisorEmail, supervisorEmail, "New CTS Ticket", "Please resolve the ticket");
                trackreferral.corrcmpInfo = _tackingBO.GetCCTKTByccno(trackreferral.corrcmpInfo.cc_number);
                trackreferral.corrcmpcontactInfo = _tackingBO.GetCCCNTInfo(trackreferral.corrcmpInfo.cc_number);
                trackreferral.inclocationinfo = _tackingBO.GetCCDetailsInfo(trackreferral.corrcmpInfo.cc_number);
                trackreferral.ccDescInfo = _tackingBO.GetCCCommentsInfo(trackreferral.corrcmpInfo.cc_number);

                FillDropdowndata();
                return View("Tracking", trackreferral);
            }
            else
            {
                return View("Tracking");
            }
        }
        /// <summary>
        /// Save Resolution tab information to DB
        /// </summary>
        /// <param name="trackresolution"></param>
        /// <returns></returns>
        [HttpPost]
        [RequireAuthentication]
        public ActionResult SaveResolutionInfo(TrackingViewModel trackresolution)
        {
            try
            {
                if (!string.IsNullOrEmpty(trackresolution.corrcmpInfo.cc_number.ToString()))
                {
                    var profileData = this.Session["UserProfile"] as UserInfo;
                    trackresolution.userInfom = profileData;
                    int UserId = trackresolution.userInfom.usersinfo_id;
                    _tackingBO.InsertUpdateCCResolutionInfo(trackresolution, trackresolution.corrcmpInfo.cc_number, UserId);
                    _tackingBO.InsertUpdateCorrCompDescResolution(trackresolution, trackresolution.corrcmpInfo.cc_number, UserId);
                    trackresolution.corrcmpInfo = _tackingBO.GetCCTKTByccno(trackresolution.corrcmpInfo.cc_number);
                    trackresolution.corrcmpcontactInfo = _tackingBO.GetCCCNTInfo(trackresolution.corrcmpInfo.cc_number);
                    trackresolution.inclocationinfo = _tackingBO.GetCCDetailsInfo(trackresolution.corrcmpInfo.cc_number);
                    trackresolution.referralInfom = _tackingBO.GetCCReferralInfo(trackresolution.corrcmpInfo.cc_number);
                    trackresolution.ccDescInfo = _tackingBO.GetCCCommentsInfo(trackresolution.corrcmpInfo.cc_number);
                    FillDropdowndata();
                    return View("Tracking", trackresolution);
                }
                else
                {
                    return View("Tracking");
                }
            }
            catch (Exception ex)
            {
                return View("Tracking");
            }
        }
        /// <summary>
        /// Save Attachments tab info
        /// </summary>
        /// <param name="trackattachment"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        [HttpPost]
        [RequireAuthentication]
        public ActionResult SaveAttachmentsInfo(TrackingViewModel trackattachment, HttpPostedFileBase file)
        {
            try
            {
                if (file != null && file.ContentLength > 0)
                {
                    string _FileName = Path.GetFileName(file.FileName);
                    string _path = Server.MapPath("~/Uploads/");
                    if (!Directory.Exists(_path))
                    {
                        Directory.CreateDirectory(_path);
                    }
                    _path = Path.Combine(_path, _FileName);
                    file.SaveAs(_path);
                    trackattachment.documentsInfom.file_name = _FileName;
                    trackattachment.documentsInfom.file_ext = Path.GetExtension(file.FileName);
                    trackattachment.documentsInfom.file_location = _path;
                    var profileData = this.Session["UserProfile"] as UserInfo;
                    trackattachment.userInfom = profileData;
                    int UserId = trackattachment.userInfom.usersinfo_id;
                    _tackingBO.InsertUpdateDocumentsInfo(trackattachment, trackattachment.corrcmpInfo.cc_number, UserId);
                    FillDropdowndata();
                    trackattachment.documentshistroy = _tackingBO.GetdocumentsHistroy(trackattachment.corrcmpInfo.cc_number);
                    return View("Tracking", trackattachment);
                }
                else
                {
                    return View("Tracking");
                }
            }
            catch (Exception ex)
            {
                return View("Tracking");
            }
        }

        public ActionResult ViewAttachment(string fileName)
        {
            try
            {
                var fs = System.IO.File.OpenRead(Server.MapPath("~/Uploads/" + fileName));
                return File(fs, "application/jpg", fileName);
            }
            catch
            {
                throw new HttpException(404, "Couldn't find " + fileName);
            }


        }
        public ActionResult Deleteattachment(string fileName)
        {
            try
            {
                //var fs = System.IO.File.OpenRead(Server.MapPath("~/Uploads/" + fileName));
                //System.IO.FileInfo fi = new System.IO.FileInfo(Server.MapPath("~/Uploads/" + fileName));
                //fi.Delete();
                //return View("Tracking");
                var fs = System.IO.File.OpenRead(Server.MapPath("~/Uploads/" + fileName));
                return File(fs, "application/jpg", fileName);
            }
            catch
            {
                throw new HttpException(404, "Couldn't find " + fileName);
            }


        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="trackvm"></param>
        /// <param name="searchterm"></param>
        /// <returns></returns>
        [RequireAuthentication]
        public ActionResult DisplayData(TrackingViewModel trackvm, string searchterm = "")
        {
            string dropdownvalue = trackvm.filterbyselectedtext;
            List<CorrCompInfo> gridData = new List<CorrCompInfo>();
            gridData = _tackingBO.GetSearchTickets();
            if (dropdownvalue == "0")
            {
                int ccno = Convert.ToInt32(searchterm);
                gridData = gridData.Where(s => s.cc_number.Equals(ccno)).ToList(); ;
            }
            else if (dropdownvalue == "1")
            {
                gridData = gridData.Where(s => s.purpose_of_contact.Contains(searchterm)).ToList();
            }
            else if (dropdownvalue == "2")
            {
                gridData = gridData.Where(s => s.cc_recdin.Contains(searchterm)).ToList();
            }
            else if (dropdownvalue == "3")
            {
                gridData = _tackingBO.GetIncCommentsSearch(searchterm);
            }
            else if (dropdownvalue == "4")
            {
                gridData = _tackingBO.GetResCommentsSearch(searchterm);
            }
            return View("DisplayData", gridData);
        }

        public ActionResult DisplayDataSearch(string searchterm = "")
        {
            List<CorrCompInfo> gridData = new List<CorrCompInfo>();
            gridData = _tackingBO.GetSearchTickets();
            return View("DisplayData", gridData);
        }

        public ActionResult ViewReferralHistory(TrackingViewModel trackrefferalhistrory)
        {
            FillDropdowndata();
            int ccno = Convert.ToInt32(Session["ccnum"]);
            List<ReferralInfo> referralhistrory = new List<ReferralInfo>();
            referralhistrory = _tackingBO.getrefferalHistroy(ccno);
            trackrefferalhistrory.referralhistroy = referralhistrory;
            return View("Tracking", trackrefferalhistrory);
        }
        /// <summary>
        /// Getting dropdown data from CTSCode table 
        /// </summary>
        public void FillDropdowndata()
        {
            List<CTSCodeTable> items = new List<CTSCodeTable>();
            items = _tackingBO.GetItemsfordropdownsctscodetable();
            ViewData["ComplaintEnquiry"] = items.Where(s => s.table_no.Equals(100)).ToList();
            ViewData["PurposeOfContact"] = items.Where(s => s.table_no.Equals(110)).ToList();
            ViewData["ComplaintStatus"] = items.Where(s => s.table_no.Equals(120)).ToList();
            ViewData["ContractwithDFTA"] = items.Where(s => s.table_no.Equals(140)).ToList();
            ViewData["IncidentLocation"] = items.Where(s => s.table_no.Equals(170)).ToList();
            ViewData["ReferredToUnit"] = items.Where(s => s.table_no.Equals(180)).ToList();
            ViewData["ReferredToGroup"] = items.Where(s => s.table_no.Equals(260)).ToList();
            ViewData["ReferredStatus"] = items.Where(s => s.table_no.Equals(190)).ToList();
            ViewData["ResolutionHandledBy"] = new List<CTSCodeTable>();// items.Where(s => s.table_no.Equals(200)).ToList();
            ViewData["Referralresolutionstatus"] = items.Where(s => s.table_no.Equals(240)).ToList();
            ViewData["ResolutionStatus"] = items.Where(s => s.table_no.Equals(210)).ToList();
            ViewData["Category"] = items.Where(s => s.table_no.Equals(220)).ToList();
            //budget table program type
            List<BudgetCodeModel> itemsPT = new List<BudgetCodeModel>();
            itemsPT = _tackingBO.GetBudgetProgramType(873);
            ViewData["BudgetProgramType"] = itemsPT;
            itemsPT = _tackingBO.GetBudgetProgramID(itemsPT[0].data_value);
            ViewData["BudgetProgramID"] = new List<BudgetCodeModel>(); 

        }

        //public void FillBudgetProgramID()
        //{
        //    List<BudgetCodeModel> itemsPT = new List<BudgetCodeModel>();
        //    itemsPID = _tackingBO.GetBudgetProgramID(itemsPT[0].data_value);
        //    ViewData["BudgetProgramID"] = itemsPID.; 
        //}

        public JsonResult FillModel(string value)
        {
            try
            {
                List<BudgetCodeModel> itemsPID = new List<BudgetCodeModel>();
                itemsPID = _tackingBO.GetBudgetProgramID(value);
                ViewData["BudgetProgramID"] = itemsPID;
                List<SelectListItem> subcatlist = new List<SelectListItem>();
                foreach (var item in itemsPID)
                {
                    subcatlist.Add(new SelectListItem
                    {
                        Text = item.data_value,
                        Value = item.display_value
                    });
                }

                return Json(subcatlist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ee)
            {

            }

            return null;
        }

        public JsonResult FillGroup(string value)
        {
            try
            {
                List<CTSCodeTable> items = new List<CTSCodeTable>();
                items = _tackingBO.GetReferalGroup(value);
                ViewData["BudgetProgramID"] = items;
                List<SelectListItem> subcatlist = new List<SelectListItem>();
                foreach (var item in items)
                {
                    subcatlist.Add(new SelectListItem
                    {
                        Text = item.table_code,
                        Value = item.short_description
                    });
                }

                return Json(subcatlist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ee)
            {

            }

            return null;
        }

        public JsonResult FillGroupUsers(string value)
        {
            try
            {
                List<UserInfo> userDetails = new List<UserInfo>();
                userDetails = _tackingBO.GetAllStaffUsersPerGroup(value, "Group User");
                ViewData["ResolutionHandledBy"] = userDetails;
                List<SelectListItem> subcatlist = new List<SelectListItem>();
                foreach (var item in userDetails)
                {
                    subcatlist.Add(new SelectListItem
                    {
                        Text = item.usersinfo_id.ToString(),
                        Value = item.users_id 
                    });
                }

                return Json(subcatlist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ee)
            {

            }

            return null;
        }

        [NonAction]
        public string GetUnitSupervisorDetails(string userunit, string userrole)
        {
            string userEmail = string.Empty;
            List<UserInfo> userDetails = new List<UserInfo>();
            userDetails = _tackingBO.GetUnitSupervisor(userunit, userrole);
            userEmail = userDetails[0].user_email;
            return userEmail;
        }


    }
}
